services:
  agent-manager:
    command:
    - agent-manager-react
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  api-gateway:
    command:
    - api-gateway
    - -p
    - pulsar://pulsar:6650
    - --timeout
    - '600'
    - --port
    - '8088'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    environment:
      GATEWAY_SECRET: ${GATEWAY_SECRET}
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    ports:
    - 8000:8000
    - 8088:8088
    restart: on-failure:100
  bookie:
    command:
    - bash
    - -c
    - bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 800M
        reservations:
          cpus: '0.1'
          memory: 800M
    environment:
      BOOKIE_MEM: -Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
      advertisedAddress: bookie
      bookieId: bookie
      clusterName: cluster-a
      metadataStoreUri: metadata-store:zk:zookeeper:2181
      zkServers: zookeeper:2181
    image: docker.io/apachepulsar/pulsar:3.3.1
    ports:
    - 3181:3181
    restart: on-failure:100
    user: 0:1000
    volumes:
    - bookie:/pulsar/data/bookkeeper
  cassandra:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1000M
        reservations:
          cpus: '0.5'
          memory: 1000M
    environment:
      JVM_OPTS: -Xms300M -Xmx300M -Dcassandra.skip_wait_for_gossip_to_settle=0
    image: docker.io/cassandra:4.1.6
    ports:
    - 9042:9042
    restart: on-failure:100
    volumes:
    - cassandra:/var/lib/cassandra
  chunker:
    command:
    - chunker-recursive
    - -p
    - pulsar://pulsar:6650
    - --chunk-size
    - '2000'
    - --chunk-overlap
    - '100'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  config-svc:
    command:
    - config-svc
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  document-embeddings:
    command:
    - document-embeddings
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  document-rag:
    command:
    - document-rag
    - -p
    - pulsar://pulsar:6650
    - --doc-limit
    - '20'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  embeddings:
    command:
    - embeddings-fastembed
    - -p
    - pulsar://pulsar:6650
    - -m
    - sentence-transformers/all-MiniLM-L6-v2
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 400M
        reservations:
          cpus: '0.5'
          memory: 400M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  grafana:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      GF_ORG_NAME: trustgraph.ai
    image: docker.io/grafana/grafana:11.1.4
    ports:
    - 3000:3000
    restart: on-failure:100
    volumes:
    - grafana-storage:/var/lib/grafana
    - ./grafana/provisioning/:/etc/grafana/provisioning/dashboards/
    - ./grafana/provisioning/:/etc/grafana/provisioning/datasources/
    - ./grafana/dashboards/:/var/lib/grafana/dashboards/
  graph-embeddings:
    command:
    - graph-embeddings
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  graph-rag:
    command:
    - graph-rag
    - -p
    - pulsar://pulsar:6650
    - --entity-limit
    - '50'
    - --triple-limit
    - '30'
    - --max-subgraph-size
    - '400'
    - --max-path-length
    - '2'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  init-trustgraph:
    command:
    - tg-init-trustgraph
    - -p
    - http://pulsar:8080
    - --config
    - '{"agent":{"tool-index":["sample-query","sample-completion"],"tool.sample-completion":{"arguments":[{"description":"A
      natural language question.","name":"question","type":"string"}],"config":{"input":"question"},"description":"This
      tool questions an LLM for further information.  The question should be a natural
      language question.","id":"sample-completion","name":"Sample text completion","type":"text-completion"},"tool.sample-query":{"arguments":[{"description":"A
      simple natural language question.","name":"question","type":"string"}],"config":{"input":"question"},"description":"This
      tool queries a knowledge base that holds information about XYZ.  This should
      be a natural language question.","id":"sample-query","name":"Sample query","type":"knowledge-query"}},"flow-classes":{"default":{"class":{"de-query:{class}":{"request":"non-persistent://tg/request/document-embeddings:{class}","response":"non-persistent://tg/response/document-embeddings:{class}"},"document-rag:{class}":{"document-embeddings-request":"non-persistent://tg/request/document-embeddings:{class}","document-embeddings-response":"non-persistent://tg/response/document-embeddings:{class}","embeddings-request":"non-persistent://tg/request/embeddings:{class}","embeddings-response":"non-persistent://tg/response/embeddings:{class}","prompt-request":"non-persistent://tg/request/prompt-rag:{class}","prompt-response":"non-persistent://tg/response/prompt-rag:{class}","request":"non-persistent://tg/request/document-rag:{class}","response":"non-persistent://tg/response/document-rag:{class}"},"embeddings:{class}":{"request":"non-persistent://tg/request/embeddings:{class}","response":"non-persistent://tg/response/embeddings:{class}"},"ge-query:{class}":{"request":"non-persistent://tg/request/graph-embeddings:{class}","response":"non-persistent://tg/response/graph-embeddings:{class}"},"graph-rag:{class}":{"embeddings-request":"non-persistent://tg/request/embeddings:{class}","embeddings-response":"non-persistent://tg/response/embeddings:{class}","graph-embeddings-request":"non-persistent://tg/request/graph-embeddings:{class}","graph-embeddings-response":"non-persistent://tg/response/graph-embeddings:{class}","prompt-request":"non-persistent://tg/request/prompt-rag:{class}","prompt-response":"non-persistent://tg/response/prompt-rag:{class}","request":"non-persistent://tg/request/graph-rag:{class}","response":"non-persistent://tg/response/graph-rag:{class}","triples-request":"non-persistent://tg/request/triples:{class}","triples-response":"non-persistent://tg/response/triples:{class}"},"metering-rag:{class}":{"input":"non-persistent://tg/response/text-completion-rag:{class}"},"metering:{class}":{"input":"non-persistent://tg/response/text-completion:{class}"},"prompt-rag:{class}":{"request":"non-persistent://tg/request/prompt-rag:{class}","response":"non-persistent://tg/response/prompt-rag:{class}","text-completion-request":"non-persistent://tg/request/text-completion-rag:{class}","text-completion-response":"non-persistent://tg/response/text-completion-rag:{class}"},"prompt:{class}":{"request":"non-persistent://tg/request/prompt:{class}","response":"non-persistent://tg/response/prompt:{class}","text-completion-request":"non-persistent://tg/request/text-completion:{class}","text-completion-response":"non-persistent://tg/response/text-completion:{class}"},"text-completion-rag:{class}":{"request":"non-persistent://tg/request/text-completion-rag:{class}","response":"non-persistent://tg/response/text-completion-rag:{class}"},"text-completion:{class}":{"request":"non-persistent://tg/request/text-completion:{class}","response":"non-persistent://tg/response/text-completion:{class}"},"triples-query:{class}":{"request":"non-persistent://tg/request/triples:{class}","response":"non-persistent://tg/response/triples:{class}"}},"description":"Default
      flow class, supports GraphRAG and document RAG","flow":{"agent-manager:{id}":{"graph-rag-request":"non-persistent://tg/request/graph-rag:{class}","graph-rag-response":"non-persistent://tg/response/graph-rag:{class}","next":"non-persistent://tg/request/agent:{id}","prompt-request":"non-persistent://tg/request/prompt:{class}","prompt-response":"non-persistent://tg/response/prompt:{class}","request":"non-persistent://tg/request/agent:{id}","response":"non-persistent://tg/response/agent:{id}","text-completion-request":"non-persistent://tg/request/text-completion:{class}","text-completion-response":"non-persistent://tg/response/text-completion:{class}"},"chunker:{id}":{"input":"persistent://tg/flow/text-document-load:{id}","output":"persistent://tg/flow/chunk-load:{id}"},"de-write:{id}":{"input":"persistent://tg/flow/document-embeddings-store:{id}"},"document-embeddings:{id}":{"embeddings-request":"non-persistent://tg/request/embeddings:{class}","embeddings-response":"non-persistent://tg/response/embeddings:{class}","input":"persistent://tg/flow/chunk-load:{id}","output":"persistent://tg/flow/document-embeddings-store:{id}"},"ge-write:{id}":{"input":"persistent://tg/flow/graph-embeddings-store:{id}"},"graph-embeddings:{id}":{"embeddings-request":"non-persistent://tg/request/embeddings:{class}","embeddings-response":"non-persistent://tg/response/embeddings:{class}","input":"persistent://tg/flow/entity-contexts-load:{id}","output":"persistent://tg/flow/graph-embeddings-store:{id}"},"kg-extract-definitions:{id}":{"entity-contexts":"persistent://tg/flow/entity-contexts-load:{id}","input":"persistent://tg/flow/chunk-load:{id}","prompt-request":"non-persistent://tg/request/prompt:{class}","prompt-response":"non-persistent://tg/response/prompt:{class}","triples":"persistent://tg/flow/triples-store:{id}"},"kg-extract-relationships:{id}":{"input":"persistent://tg/flow/chunk-load:{id}","prompt-request":"non-persistent://tg/request/prompt:{class}","prompt-response":"non-persistent://tg/response/prompt:{class}","triples":"persistent://tg/flow/triples-store:{id}"},"kg-store:{id}":{"graph-embeddings-input":"persistent://tg/flow/graph-embeddings-store:{id}","triples-input":"persistent://tg/flow/triples-store:{id}"},"pdf-decoder:{id}":{"input":"persistent://tg/flow/document-load:{id}","output":"persistent://tg/flow/text-document-load:{id}"},"triples-write:{id}":{"input":"persistent://tg/flow/triples-store:{id}"}},"interfaces":{"agent":{"request":"non-persistent://tg/request/agent:{id}","response":"non-persistent://tg/response/agent:{id}"},"document-embeddings":{"request":"non-persistent://tg/request/document-embeddings:{class}","response":"non-persistent://tg/response/document-embeddings:{class}"},"document-embeddings-store":"persistent://tg/flow/document-embeddings-store:{id}","document-load":"persistent://tg/flow/document-load:{id}","document-rag":{"request":"non-persistent://tg/request/document-rag:{class}","response":"non-persistent://tg/response/document-rag:{class}"},"embeddings":{"request":"non-persistent://tg/request/embeddings:{class}","response":"non-persistent://tg/response/embeddings:{class}"},"entity-contexts-load":"persistent://tg/flow/entity-contexts-load:{id}","graph-embeddings":{"request":"non-persistent://tg/request/graph-embeddings:{class}","response":"non-persistent://tg/response/graph-embeddings:{class}"},"graph-embeddings-store":"persistent://tg/flow/graph-embeddings-store:{id}","graph-rag":{"request":"non-persistent://tg/request/graph-rag:{class}","response":"non-persistent://tg/response/graph-rag:{class}"},"prompt":{"request":"non-persistent://tg/request/prompt:{class}","response":"non-persistent://tg/response/prompt:{class}"},"text-completion":{"request":"non-persistent://tg/request/text-completion:{class}","response":"non-persistent://tg/response/text-completion:{class}"},"text-load":"persistent://tg/flow/text-document-load:{id}","triples":{"request":"non-persistent://tg/request/triples:{class}","response":"non-persistent://tg/response/triples:{class}"},"triples-store":"persistent://tg/flow/triples-store:{id}"},"tags":["document-rag","graph-rag","knowledge-extraction"]}},"flows":{"0000":{"class-name":"default","description":"Default
      processing flow","interfaces":{"agent":{"request":"non-persistent://tg/request/agent:0000","response":"non-persistent://tg/response/agent:0000"},"document-embeddings":{"request":"non-persistent://tg/request/document-embeddings:default","response":"non-persistent://tg/response/document-embeddings:default"},"document-embeddings-store":"persistent://tg/flow/document-embeddings-store:0000","document-load":"persistent://tg/flow/document-load:0000","document-rag":{"request":"non-persistent://tg/request/document-rag:default","response":"non-persistent://tg/response/document-rag:default"},"embeddings":{"request":"non-persistent://tg/request/embeddings:default","response":"non-persistent://tg/response/embeddings:default"},"entity-contexts-load":"persistent://tg/flow/entity-contexts-load:0000","graph-embeddings":{"request":"non-persistent://tg/request/graph-embeddings:default","response":"non-persistent://tg/response/graph-embeddings:default"},"graph-embeddings-store":"persistent://tg/flow/graph-embeddings-store:0000","graph-rag":{"request":"non-persistent://tg/request/graph-rag:default","response":"non-persistent://tg/response/graph-rag:default"},"prompt":{"request":"non-persistent://tg/request/prompt:default","response":"non-persistent://tg/response/prompt:default"},"text-completion":{"request":"non-persistent://tg/request/text-completion:default","response":"non-persistent://tg/response/text-completion:default"},"text-load":"persistent://tg/flow/text-document-load:0000","triples":{"request":"non-persistent://tg/request/triples:default","response":"non-persistent://tg/response/triples:default"},"triples-store":"persistent://tg/flow/triples-store:0000"}}},"flows-active":{"agent-manager":{"0000":{"graph-rag-request":"non-persistent://tg/request/graph-rag:default","graph-rag-response":"non-persistent://tg/response/graph-rag:default","next":"non-persistent://tg/request/agent:0000","prompt-request":"non-persistent://tg/request/prompt:default","prompt-response":"non-persistent://tg/response/prompt:default","request":"non-persistent://tg/request/agent:0000","response":"non-persistent://tg/response/agent:0000","text-completion-request":"non-persistent://tg/request/text-completion:default","text-completion-response":"non-persistent://tg/response/text-completion:default"}},"chunker":{"0000":{"input":"persistent://tg/flow/text-document-load:0000","output":"persistent://tg/flow/chunk-load:0000"}},"de-query":{"default":{"request":"non-persistent://tg/request/document-embeddings:default","response":"non-persistent://tg/response/document-embeddings:default"}},"de-write":{"0000":{"input":"persistent://tg/flow/document-embeddings-store:0000"}},"document-embeddings":{"0000":{"embeddings-request":"non-persistent://tg/request/embeddings:default","embeddings-response":"non-persistent://tg/response/embeddings:default","input":"persistent://tg/flow/chunk-load:0000","output":"persistent://tg/flow/document-embeddings-store:0000"}},"document-rag":{"default":{"document-embeddings-request":"non-persistent://tg/request/document-embeddings:default","document-embeddings-response":"non-persistent://tg/response/document-embeddings:default","embeddings-request":"non-persistent://tg/request/embeddings:default","embeddings-response":"non-persistent://tg/response/embeddings:default","prompt-request":"non-persistent://tg/request/prompt-rag:default","prompt-response":"non-persistent://tg/response/prompt-rag:default","request":"non-persistent://tg/request/document-rag:default","response":"non-persistent://tg/response/document-rag:default"}},"embeddings":{"default":{"request":"non-persistent://tg/request/embeddings:default","response":"non-persistent://tg/response/embeddings:default"}},"ge-query":{"default":{"request":"non-persistent://tg/request/graph-embeddings:default","response":"non-persistent://tg/response/graph-embeddings:default"}},"ge-write":{"0000":{"input":"persistent://tg/flow/graph-embeddings-store:0000"}},"graph-embeddings":{"0000":{"embeddings-request":"non-persistent://tg/request/embeddings:default","embeddings-response":"non-persistent://tg/response/embeddings:default","input":"persistent://tg/flow/entity-contexts-load:0000","output":"persistent://tg/flow/graph-embeddings-store:0000"}},"graph-rag":{"default":{"embeddings-request":"non-persistent://tg/request/embeddings:default","embeddings-response":"non-persistent://tg/response/embeddings:default","graph-embeddings-request":"non-persistent://tg/request/graph-embeddings:default","graph-embeddings-response":"non-persistent://tg/response/graph-embeddings:default","prompt-request":"non-persistent://tg/request/prompt-rag:default","prompt-response":"non-persistent://tg/response/prompt-rag:default","request":"non-persistent://tg/request/graph-rag:default","response":"non-persistent://tg/response/graph-rag:default","triples-request":"non-persistent://tg/request/triples:default","triples-response":"non-persistent://tg/response/triples:default"}},"kg-extract-definitions":{"0000":{"entity-contexts":"persistent://tg/flow/entity-contexts-load:0000","input":"persistent://tg/flow/chunk-load:0000","prompt-request":"non-persistent://tg/request/prompt:default","prompt-response":"non-persistent://tg/response/prompt:default","triples":"persistent://tg/flow/triples-store:0000"}},"kg-extract-relationships":{"0000":{"input":"persistent://tg/flow/chunk-load:0000","prompt-request":"non-persistent://tg/request/prompt:default","prompt-response":"non-persistent://tg/response/prompt:default","triples":"persistent://tg/flow/triples-store:0000"}},"kg-store":{"0000":{"graph-embeddings-input":"persistent://tg/flow/graph-embeddings-store:0000","triples-input":"persistent://tg/flow/triples-store:0000"}},"metering":{"default":{"input":"non-persistent://tg/response/text-completion:default"}},"metering-rag":{"default":{"input":"non-persistent://tg/response/text-completion-rag:default"}},"pdf-decoder":{"0000":{"input":"persistent://tg/flow/document-load:0000","output":"persistent://tg/flow/text-document-load:0000"}},"prompt":{"default":{"request":"non-persistent://tg/request/prompt:default","response":"non-persistent://tg/response/prompt:default","text-completion-request":"non-persistent://tg/request/text-completion:default","text-completion-response":"non-persistent://tg/response/text-completion:default"}},"prompt-rag":{"default":{"request":"non-persistent://tg/request/prompt-rag:default","response":"non-persistent://tg/response/prompt-rag:default","text-completion-request":"non-persistent://tg/request/text-completion-rag:default","text-completion-response":"non-persistent://tg/response/text-completion-rag:default"}},"text-completion":{"default":{"request":"non-persistent://tg/request/text-completion:default","response":"non-persistent://tg/response/text-completion:default"}},"text-completion-rag":{"default":{"request":"non-persistent://tg/request/text-completion-rag:default","response":"non-persistent://tg/response/text-completion-rag:default"}},"triples-query":{"default":{"request":"non-persistent://tg/request/triples:default","response":"non-persistent://tg/response/triples:default"}},"triples-write":{"0000":{"input":"persistent://tg/flow/triples-store:0000"}}},"interface-descriptions":{"agent":{"description":"Agent
      service","kind":"request-response"},"document-embeddings":{"description":"Document
      embeddings service","kind":"request-response"},"document-embeddings-store":{"description":"Document
      embeddings loader","kind":"send"},"document-load":{"description":"Document loader","kind":"send","visible":true},"document-rag":{"description":"ChunkRAG
      service","kind":"request-response"},"entity-contexts-load":{"description":"Entity
      contexts loader","kind":"send"},"graph-embeddings":{"description":"Graph embeddings
      service","kind":"request-response"},"graph-embeddings-store":{"description":"Graph
      embeddings loader","kind":"send"},"graph-rag":{"description":"GraphRAG service","kind":"request-response"},"prompt":{"description":"Prompt
      service","kind":"request-response"},"text-completion":{"description":"Text completion
      service","kind":"request-response"},"text-load":{"description":"Text document
      loader","kind":"send","visible":true},"triples":{"description":"Triples query
      service","kind":"request-response"},"triples-store":{"description":"Triples
      loader","kind":"send"}},"prompt":{"system":"You are a helpful assistant.\n","template-index":["agent-react","document-prompt","extract-definitions","extract-relationships","extract-rows","extract-topics","kg-prompt","question"],"template.agent-react":{"prompt":"Answer
      the following questions as best you can. You have\naccess to the following functions:\n\n{%
      for tool in tools %}{\n    \"function\": \"{{ tool.name }}\",\n    \"description\":
      \"{{ tool.description }}\",\n    \"arguments\": [\n{% for arg in tool.arguments
      %}        {\n            \"name\": \"{{ arg.name }}\",\n            \"type\":
      \"{{ arg.type }}\",\n            \"description\": \"{{ arg.description }}\",\n        }\n{%
      endfor %}\n    ]\n}\n{% endfor %}\n\nYou can either choose to call a function
      to get more information, or\nreturn a final answer.\n    \nTo call a function,
      respond with a JSON object of the following format:\n\n{\n    \"thought\": \"your
      thought about what to do\",\n    \"action\": \"the action to take, should be
      one of [{{tool_names}}]\",\n    \"arguments\": {\n        \"argument1\": \"argument_value\",\n        \"argument2\":
      \"argument_value\"\n    }\n}\n\nTo provide a final answer, response a JSON object
      of the following format:\n\n{\n  \"thought\": \"I now know the final answer\",\n  \"final-answer\":
      \"the final answer to the original input question\"\n}\n\nPrevious steps are
      included in the input.  Each step has the following\nformat in your output:\n\n{\n  \"thought\":
      \"your thought about what to do\",\n  \"action\": \"the action taken\",\n  \"arguments\":
      {\n      \"argument1\": action argument,\n      \"argument2\": action argument2\n  },\n  \"observation\":
      \"the result of the action\",\n}\n\nRespond by describing either one single
      thought/action/arguments or\nthe final-answer.  Pause after providing one action
      or final-answer.\n\n{% if context %}Additional context has been provided:\n{{context}}{%
      endif %}\n\nQuestion: {{question}}\n\nInput:\n    \n{% for h in history %}\n{\n    \"action\":
      \"{{h.action}}\",\n    \"arguments\": [\n{% for k, v in h.arguments.items()
      %}        {\n            \"{{k}}\": \"{{v}}\",\n{%endfor%}        }\n    ],\n    \"observation\":
      \"{{h.observation}}\"\n}\n{% endfor %}","response-type":"json"},"template.document-prompt":{"prompt":"Study
      the following context. Use only the information provided in the context in your
      response. Do not speculate if the answer is not found in the provided set of
      knowledge statements.\n\nHere is the context:\n{{documents}}\n\nUse only the
      provided knowledge statements to respond to the following:\n{{query}}\n","response-type":"text"},"template.extract-definitions":{"prompt":"Study
      the following text and derive definitions for any discovered entities. Do not
      provide definitions for entities whose definitions are incomplete or unknown.
      Output relationships in JSON format as an array of objects with keys:\n- entity:
      the name of the entity\n- definition: English text which defines the entity\n\nHere
      is the text:\n{{text}}\n\nRequirements:\n- Do not provide explanations.\n- Do
      not use special characters in the response text.\n- The response will be written
      as plain text.\n- Do not include null or unknown definitions.\n- The response
      shall use the following JSON schema structure:\n\n```json\n[{\"entity\": string,
      \"definition\": string}]\n```","response-type":"json","schema":{"items":{"properties":{"definition":{"type":"string"},"entity":{"type":"string"}},"required":["entity","definition"],"type":"object"},"type":"array"}},"template.extract-relationships":{"prompt":"Study
      the following text and derive entity relationships.  For each relationship,
      derive the subject, predicate and object of the relationship. Output relationships
      in JSON format as an array of objects with keys:\n- subject: the subject of
      the relationship\n- predicate: the predicate\n- object: the object of the relationship\n-
      object-entity: FALSE if the object is a simple data type and TRUE if the object
      is an entity\n\nHere is the text:\n{{text}}\n\nRequirements:\n- You will respond
      only with well formed JSON.\n- Do not provide explanations.\n- Respond only
      with plain text.\n- Do not respond with special characters.\n- The response
      shall use the following JSON schema structure:\n\n```json\n[{\"subject\": string,
      \"predicate\": string, \"object\": string, \"object-entity\": boolean}]\n```\n","response-type":"json","schema":{"items":{"properties":{"object":{"type":"string"},"object-entity":{"type":"boolean"},"predicate":{"type":"string"},"subject":{"type":"string"}},"required":["subject","predicate","object","object-entity"],"type":"object"},"type":"array"}},"template.extract-rows":{"prompt":"<instructions>\nStudy
      the following text and derive objects which match the schema provided.\n\nYou
      must output an array of JSON objects for each object you discover\nwhich matches
      the schema.  For each object, output a JSON object whose fields\ncarry the name
      field specified in the schema.\n</instructions>\n\n<schema>\n{{schema}}\n</schema>\n\n<text>\n{{text}}\n</text>\n\n<requirements>\nYou
      will respond only with raw JSON format data. Do not provide\nexplanations. Do
      not add markdown formatting or headers or prefixes.\n</requirements>","response-type":"json"},"template.extract-topics":{"prompt":"Read
      the provided text carefully. You will identify topics and their definitions
      found in the provided text. Topics are intangible concepts.\n\nReading Instructions:\n-
      Ignore document formatting in the provided text.\n- Study the provided text
      carefully for intangible concepts.\n\nHere is the text:\n{{text}}\n\nResponse
      Instructions: \n- Do not respond with special characters.\n- Return only topics
      that are concepts and unique to the provided text.\n- Respond only with well-formed
      JSON.\n- The JSON response shall be an array of objects with keys \"topic\"
      and \"definition\". \n- The response shall use the following JSON schema structure:\n\n```json\n[{\"topic\":
      string, \"definition\": string}]\n```\n\n- Do not write any additional text
      or explanations.","response-type":"json","schema":{"items":{"properties":{"definition":{"type":"string"},"topic":{"type":"string"}},"required":["topic","definition"],"type":"object"},"type":"array"}},"template.kg-prompt":{"prompt":"Study
      the following set of knowledge statements. The statements are written in Cypher
      format that has been extracted from a knowledge graph. Use only the provided
      set of knowledge statements in your response. Do not speculate if the answer
      is not found in the provided set of knowledge statements.\n\nHere''s the knowledge
      statements:\n{% for edge in knowledge %}({{edge.s}})-[{{edge.p}}]->({{edge.o}})\n{%endfor%}\n\nUse
      only the provided knowledge statements to respond to the following:\n{{query}}\n","response-type":"text"},"template.question":{"prompt":"{{question}}"}},"token-costs":{"anthropic.claude-3-5-sonnet-20240620-v1:0":{"input_price":3.0000000000000001e-06,"model_name":"anthropic.claude-3-5-sonnet-20240620-v1:0","output_price":1.5e-05},"anthropic.claude-3-haiku-20240307-v1:0":{"input_price":2.4999999999999999e-07,"model_name":"anthropic.claude-3-haiku-20240307-v1:0","output_price":1.2500000000000001e-06},"c4ai-aya-23-8b":{"input_price":0,"model_name":"c4ai-aya-23-8b","output_price":0},"claude-3-5-sonnet-20240620":{"input_price":3.0000000000000001e-06,"model_name":"claude-3-5-sonnet-20240620","output_price":1.5e-05},"claude-3-haiku-20240307":{"input_price":2.4999999999999999e-07,"model_name":"claude-3-haiku-20240307","output_price":1.2500000000000001e-06},"claude-3-opus-20240229":{"input_price":1.5e-05,"model_name":"claude-3-opus-20240229","output_price":7.4999999999999993e-05},"claude-3-sonnet-20240229":{"input_price":3.0000000000000001e-06,"model_name":"claude-3-sonnet-20240229","output_price":1.5e-05},"cohere.command-r-plus-v1:0":{"input_price":3.0000000000000001e-06,"model_name":"cohere.command-r-plus-v1:0","output_price":1.5e-05},"command-r-08-202":{"input_price":2.5000000000000002e-06,"model_name":"command-r-08-202","output_price":1.0000000000000001e-05},"gpt-4o":{"input_price":5.0000000000000004e-06,"model_name":"gpt-4o","output_price":1.5e-05},"gpt-4o-2024-05-13":{"input_price":5.0000000000000004e-06,"model_name":"gpt-4o-2024-05-13","output_price":1.5e-05},"gpt-4o-2024-08-06":{"input_price":2.5000000000000002e-06,"model_name":"gpt-4o-2024-08-06","output_price":1.0000000000000001e-05},"gpt-4o-mini":{"input_price":1.4999999999999999e-07,"model_name":"gpt-4o-mini","output_price":5.9999999999999997e-07},"llama.cpp":{"input_price":0,"model_name":"llama.cpp","output_price":0},"meta.llama3-1-405b-instruct-v1:0":{"input_price":5.3199999999999999e-06,"model_name":"meta.llama3-1-405b-instruct-v1:0","output_price":1.5999999999999999e-05},"meta.llama3-1-70b-instruct-v1:0":{"input_price":9.9000000000000005e-07,"model_name":"meta.llama3-1-70b-instruct-v1:0","output_price":9.9000000000000005e-07},"meta.llama3-1-8b-instruct-v1:0":{"input_price":2.2000000000000001e-07,"model_name":"meta.llama3-1-8b-instruct-v1:0","output_price":2.2000000000000001e-07},"mistral.mistral-large-2407-v1:0":{"input_price":3.9999999999999998e-06,"model_name":"mistral.mistral-large-2407-v1:0","output_price":1.2e-05},"mistral.mixtral-8x7b-instruct-v0:1":{"input_price":4.4999999999999998e-07,"model_name":"mistral.mixtral-8x7b-instruct-v0:1","output_price":6.9999999999999997e-07},"ollama":{"input_price":0,"model_name":"ollama","output_price":0}}}'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  kg-extract-definitions:
    command:
    - kg-extract-definitions
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  kg-extract-relationships:
    command:
    - kg-extract-relationships
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  kg-manager:
    command:
    - kg-manager
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  kg-store:
    command:
    - kg-store
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  librarian:
    command:
    - librarian
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  metering:
    command:
    - metering
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  metering-rag:
    command:
    - metering
    - -p
    - pulsar://pulsar:6650
    - --id
    - metering-rag
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  minio:
    command:
    - minio
    - server
    - /minio_data
    - --console-address
    - :9001
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ROOT_USER: minioadmin
    image: docker.io/minio/minio:RELEASE.2025-02-03T21-03-04Z
    ports:
    - 9000:9000
    - 9001:9001
    restart: on-failure:100
    volumes:
    - minio-data:/minio_data
  pdf-decoder:
    command:
    - pdf-decoder
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  prometheus:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/prom/prometheus:v2.53.2
    ports:
    - 9090:9090
    restart: on-failure:100
    volumes:
    - ./prometheus:/etc/prometheus/
    - prometheus-data:/prometheus
  prompt:
    command:
    - prompt-template
    - -p
    - pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  prompt-rag:
    command:
    - prompt-template
    - -p
    - pulsar://pulsar:6650
    - --id
    - prompt-rag
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  pulsar:
    command:
    - bash
    - -c
    - bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 800M
        reservations:
          cpus: '0.1'
          memory: 800M
    environment:
      PULSAR_MEM: -Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
      advertisedAddress: pulsar
      advertisedListeners: external:pulsar://pulsar:6650,localhost:pulsar://localhost:6650
      clusterName: cluster-a
      managedLedgerDefaultAckQuorum: '1'
      managedLedgerDefaultEnsembleSize: '1'
      managedLedgerDefaultWriteQuorum: '1'
      metadataStoreUrl: zk:zookeeper:2181
      zookeeperServers: zookeeper:2181
    image: docker.io/apachepulsar/pulsar:3.3.1
    ports:
    - 6650:6650
    - 8080:8080
    restart: on-failure:100
  pulsar-init:
    command:
    - bash
    - -c
    - sleep 10 && bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper
      zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://pulsar:8080
      --broker-service-url pulsar://pulsar:6650
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.05'
          memory: 512M
    environment:
      PULSAR_MEM: -Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    image: docker.io/apachepulsar/pulsar:3.3.1
    restart: on-failure:100
  qdrant:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 1024M
    image: docker.io/qdrant/qdrant:v1.13.3
    ports:
    - 6333:6333
    - 6334:6334
    restart: on-failure:100
    volumes:
    - qdrant:/qdrant/storage
  query-doc-embeddings:
    command:
    - de-query-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  query-graph-embeddings:
    command:
    - ge-query-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  query-triples:
    command:
    - triples-query-cassandra
    - -p
    - pulsar://pulsar:6650
    - -g
    - cassandra
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 512M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  store-doc-embeddings:
    command:
    - de-write-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  store-graph-embeddings:
    command:
    - ge-write-qdrant
    - -p
    - pulsar://pulsar:6650
    - -t
    - http://qdrant:6333
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  store-triples:
    command:
    - triples-write-cassandra
    - -p
    - pulsar://pulsar:6650
    - -g
    - cassandra
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    image: docker.io/trustgraph/trustgraph-flow:0.23.21
    restart: on-failure:100
  text-completion:
    command:
    - text-completion-bedrock
    - -p
    - pulsar://pulsar:6650
    - -x
    - '2048'
    - -t
    - '0.100'
    - -m
    - anthropic.claude-3-5-haiku-20241022-v1:0
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    image: docker.io/trustgraph/trustgraph-bedrock:0.23.21
    restart: on-failure:100
  text-completion-rag:
    command:
    - text-completion-bedrock
    - -p
    - pulsar://pulsar:6650
    - --id
    - text-completion-rag
    - -x
    - '2048'
    - -t
    - '0.100'
    - -m
    - anthropic.claude-3-5-haiku-20241022-v1:0
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    image: docker.io/trustgraph/trustgraph-bedrock:0.23.21
    restart: on-failure:100
  workbench-ui:
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 256M
    image: docker.io/trustgraph/workbench-ui:0.3.1
    ports:
    - 8888:8888
    restart: on-failure:100
  zookeeper:
    command:
    - bash
    - -c
    - bin/apply-config-from-env.py conf/zookeeper.conf && bin/generate-zookeeper-config.sh
      conf/zookeeper.conf && exec bin/pulsar zookeeper
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 400M
        reservations:
          cpus: '0.05'
          memory: 400M
    environment:
      PULSAR_MEM: -Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
      metadataStoreUrl: zk:zookeeper:2181
    image: docker.io/apachepulsar/pulsar:3.3.1
    ports:
    - 2181:2181
    - 2888:2888
    - 3888:3888
    restart: on-failure:100
    user: 0:1000
    volumes:
    - zookeeper:/pulsar/data/zookeeper
volumes:
  bookie: {}
  cassandra: {}
  grafana-storage: {}
  minio-data: {}
  prometheus-data: {}
  qdrant: {}
  zookeeper: {}
